# name: Database CI/CD

# on:
#   workflow_dispatch:
#   pull_request:
#     branches:
#       - main

# env:
#   SQL_PROJECT_PATH: Platform/dbo/SOL.Database.Tenant/SOL.Database.Tenant.sqlproj
#   DOCKERFILE_PATH: Platform/dbo/Dockerfile
#   WORKING_DIR: Platform/dbo

# jobs:
#   build:
#     runs-on: windows-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup MSBuild
#         uses: microsoft/setup-msbuild@v1.3.1

#       - name: Build Solution
#         working-directory: ${{ github.workspace }}
#         run: |
#           msbuild "${{ env.SOLUTION_PATH }}" /p:Configuration=Release /p:TargetFrameworkVersion=v4.7.1

#       - name: Verify DACPAC Output
#         working-directory: ${{ env.WORKING_DIR }}
#         run: |
#           Get-ChildItem -Recurse "${{ github.workspace }}/Platform/dbo/SOL.Database.Tenant/bin/Release/"

#       - name: Upload DACPAC Artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: database-package
#           path: ${{ github.workspace }}/Platform/dbo/SOL.Database.Tenant/bin/Release/SOL.Database.Tenant.dacpac

#   deploy:
#     needs: build
#     runs-on: self-hosted
#     steps:
#       - name: Download Artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: database-package
#           path: ${{ github.workspace }}

#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       - name: Deploy Database
#         uses: Azure/sql-action@v2
#         with:
#           connection-string: ${{ secrets.CONNECTION_STRING }}
#           path: ${{ github.workspace }}/SOL.Database.Tenant.dacpac
#           action: publish
#           arguments: '/p:DropObjectsNotInSource=true /p:BlockOnPossibleDataLoss=true'
name: Database CI/CD

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-db:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Install .NET Framework 4.0 Developer Pack (if missing)
        shell: powershell
        run: |
          $frameworkPath = "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0"
          if (!(Test-Path $frameworkPath)) {
            Write-Host "❌ .NET Framework 4.0 Developer Pack not found. Installing..."
            Invoke-WebRequest -Uri "https://download.microsoft.com/download/3/0/9/3093DF06-882A-41B1-8BE4-2D34FE456D17/dotNetFx40_Full_x86_x64.exe" -OutFile "$env:TEMP\dotNetFx40.exe"
            Start-Process -FilePath "$env:TEMP\dotNetFx40.exe" -ArgumentList "/q" -Wait
            Write-Host "✅ .NET Framework 4.0 Developer Pack installed!"
          } else {
            Write-Host "✅ .NET Framework 4.0 Developer Pack is already installed!"
          }

      - name: Build Database Project
        run: |
          msbuild Platform/dbo/SOL.Database.Tenant/SOL.Database.Tenant.sqlproj /p:Configuration=Debug
        shell: powershell

      - name: Copy DACPAC to Staging Directory
        run: |
          New-Item -ItemType Directory -Path staging -Force
          Copy-Item -Path Platform/dbo/SOL.Database.Tenant/bin/Debug/*.dacpac -Destination staging
        shell: powershell

      - name: Upload DACPAC Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dropDacpac
          path: staging

  deploy-db:
    runs-on: self-hosted
    needs: build-db
    environment: dbaverificationscript
    steps:
      - name: Download DACPAC Artifact
        uses: actions/download-artifact@v4
        with:
          name: dropDacpac
          path: staging

      - name: Generate Schema Change Script
        run: |
          # Locate the generated DACPAC file.
          $dacpac = Get-ChildItem -Path staging -Filter *.dacpac | Select-Object -First 1
          if (-not $dacpac) {
            Write-Error "No DACPAC file found in staging folder"
            exit 1
          }
          $outputScript = "schemaChangeScript.sql"
          
          # Use SqlPackage.exe to generate the SQL update script.
          & "C:\Program Files (x86)\Microsoft SQL Server\150\DAC\bin\SqlPackage.exe" `
            /Action:Script `
            /SourceFile:"$($dacpac.FullName)" `
            /TargetServerName:"${{ secrets.AZURE_SQL_SERVER }}.database.windows.net" `
            /TargetDatabaseName:"${{ secrets.AZURE_SQL_DATABASE }}" `
            /TargetUser:"${{ secrets.AZURE_SQL_ADMIN_USER }}" `
            /TargetPassword:"${{ secrets.AZURE_SQL_ADMIN_PASSWORD }}" `
            /OutputPath:$outputScript
          
          Write-Host "Auto Generated SQL Update Script:"
          Get-Content $outputScript
        shell: powershell
