name: Frontend CI/CD

on:
  # push:
  #   branches:
  #     - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  FRONTEND_PATH: LinesApp
  DOCKER_IMAGE_NAME: linesapp
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_PATH }}/package-lock.json

      - name: Install Dependencies
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm install

      - name: Generate GraphQL Types
        working-directory: ${{ env.FRONTEND_PATH }}
        run: |
          npx graphql-codegen --config codegen.ts || echo "Skipping GraphQL code generation"

      - name: Build Vue App
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.FRONTEND_PATH }}/dist

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.FRONTEND_PATH }}/dist

      - name: Log in to Azure Container Registry
        run: echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: Build and Push Docker Image
        working-directory: ${{ env.FRONTEND_PATH }}
        run: |
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: Tag and Push Latest Image
        run: |
          docker tag ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest