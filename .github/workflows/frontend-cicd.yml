name: Frontend CI/CD

on:
  # push:
  #   branches:
  #     - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  FRONTEND_PATH: LinesApp
  DOCKER_IMAGE_NAME: linesapp
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  # build-frontend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: üõéÔ∏è Checkout Code
  #       uses: actions/checkout@v4

  #     - name: üèóÔ∏è Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         cache: npm
  #         cache-dependency-path: ${{ env.FRONTEND_PATH }}/package-lock.json

  #     - name: üì¶ Install Dependencies
  #       working-directory: ${{ env.FRONTEND_PATH }}
  #       run: npm install

  #     - name: üîß Generate GraphQL Types
  #       working-directory: ${{ env.FRONTEND_PATH }}
  #       run: npx graphql-codegen --config codegen.ts || echo "Skipping GraphQL code generation"

  #     - name: üîç Run Lint Check
  #       working-directory: ${{ env.FRONTEND_PATH }}
  #       run: npm run lint || echo "Linting failed, skipping for now"

  #     - name: üèóÔ∏è Build Frontend
  #       working-directory: ${{ env.FRONTEND_PATH }}
  #       run: npm run build

  build-and-push-docker:
    runs-on: ubuntu-latest
    # needs: build-frontend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: LinesApp/package-lock.json 

      - name: Install Dependencies
        working-directory: LinesApp
        run: npm ci

      - name: Generate GraphQL Types
        working-directory: LinesApp
        run: npm run codegen 

      - name: Build Frontend
        working-directory: LinesApp
        run: npm run build

      - name: üîë Log in to Azure Container Registry
        run: echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: üèóÔ∏è Build and Push Docker Image
        working-directory: ${{ env.FRONTEND_PATH }}
        run: |
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: üè∑Ô∏è Tag and Push Latest Image
        run: |
          docker tag ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
            ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest