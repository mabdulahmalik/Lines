name: Platform Service CI/CD

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'  
  PROJECT_PATH: Platform/src/SOL.Gateway/SOL.Gateway.csproj
  DOCKERFILE_PATH: Platform/src/Dockerfile
  BUILD_OUTPUT_PATH: Platform/src/SOL.Gateway/publish
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_NAME: platform-service

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

      - name: Publish
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -o ${{ env.BUILD_OUTPUT_PATH }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: platform-service-artifact
          path: ${{ env.BUILD_OUTPUT_PATH }}

  docker-build-and-push:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: üîç Check Docker Installation
        run: |
          if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Error "‚ùå Docker is not installed or not in PATH. Please install Docker and restart the runner."; exit 1
          } else {
            Write-Host "‚úÖ Docker is installed!"
          }
        shell: pwsh

      - name: üöÄ Start Docker Service (Windows only)
        if: runner.os == 'Windows'
        run: |
          Write-Host "Checking if Docker service is running..."
          $service = Get-Service docker -ErrorAction SilentlyContinue
          if ($service -and $service.Status -ne 'Running') {
            Write-Host "üöÄ Starting Docker..."
            Start-Service docker
            Start-Sleep -s 5  # Wait for Docker to start
          } else {
            Write-Host "‚úÖ Docker is already running!"
          }
        shell: pwsh

      - name: Log in to Azure Container Registry
        run: |
          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -f ${{ env.DOCKERFILE_PATH }} ${{ env.PLATFORM_PROJECT_PATH }}
          docker tag ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker Image to ACR
        run: |
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
